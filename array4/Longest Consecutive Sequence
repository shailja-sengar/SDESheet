#include <iostream>
#include<vector>
#include<algorithm>
#include<set>
using namespace std;

//brute force: tc:O(n*log n), sc:O(1)
/*int longestSeq(vector<int>&nums){
    sort(nums.begin(), nums.end());
    int prev = nums[0];
    int curr = 1;
    int ans = 1;
    int n = nums.size();
    for(int i=0; i<n; i++){
        if(nums[i] == prev+1){
            curr++;
        }
        else if(nums[i] != prev){
            curr = 1;
        }
        prev = nums[i];
        ans = max(ans, curr);
    }
    return ans;
}*/

//optimal: using set, tc:O(N), O(n)
int longestSeq(vector<int>&nums){
    set<int>st;
    for(auto it : nums){
        st.insert(it);
    }
    int ans = 0;
    for(int i=0; i<nums.size(); i++){
        if(!st.count(nums[i] - 1)){
            int currentNum = nums[i];
            int currStreak = 1;
            
            while(st.count(currentNum + 1)){
                currentNum += 1;
                currStreak++;
            }
            ans = max(ans, currStreak);
        }
        
    }
    return ans;
}
int main()
{
    vector<int>nums{100, 200, 1, 3, 2, 4};
    int ans = longestSeq(nums);
    cout<<ans;

    return 0;
}
