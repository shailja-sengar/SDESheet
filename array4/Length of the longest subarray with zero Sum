#include <iostream>
#include<vector>
#include<algorithm>
#include<unordered_map>
using namespace std;

//brute force: tc:O(n^2), sc:O(1)
/*int longestSubarray(vector<int>&nums){
    int n = nums.size();
    int len = 0;
    for(int i=0; i<n; i++){
        int sum = 0;
        for(int j=i; j<n; j++){
            sum += nums[j];
            if(sum == 0){
                len = max(len, j-i+1);
            }
        }
    }
    return len;
}*/

//optimal: using map, tc:O(n), sc:O(n)
int longestSubarray(vector<int>&nums){
    int len = 0;
    int n = nums.size();
    int currSum=0;
    unordered_map<int, int>ump;
    for(int i=0; i<n; i++){
        currSum += nums[i];
        if(currSum == 0){
            len = i+1;
        }
        else{
            //if we find current sum in map
            if(ump.find(nums[i]) != ump.end()){
                len = max(len, i - ump[currSum]);
            }
            else
                ump[currSum] = i;
        
        }
        
    }
    return len;
}
int main()
{
    vector<int>nums{6, -2, 2, -8, 1, 7, 4, -10};
    int ans = longestSubarray(nums);
    cout<<ans;

    return 0;
}
