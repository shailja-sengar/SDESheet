

#include <iostream>
#include<vector>
#include<algorithm>
#include<unordered_map>
using namespace std;

//brute force: tc:O(n^2), sc:O(1)
/*vector<int>twoSum(vector<int>&arr, int tar){
    vector<int>ans;
    int n = arr.size();
    for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            if(arr[i]+arr[j] == tar){
                ans.push_back(i);
                ans.push_back(j);
                break;
            }
        }
    }
    return ans;
}*/

//optimal: using two pointer, tc:(nlogn), sc:O()
/*vector<int>twoSum(vector<int>&arr, int tar){
    sort(arr.begin(), arr.end());
    vector<int>ans;
    int i=0, j=arr.size()-1;
    while(i < j){
        if(arr[i]+arr[j] == tar){
            ans.push_back(i);
            ans.push_back(j);
            break;
        }
        else if(arr[i]+arr[j] > tar){
            j--;
        }
        else{
            i++;
        }
    }
    return ans;
}*/

//most optimal: using hashing, tc:O(n), sc:O(n)
vector<int>twoSum(vector<int>&arr, int tar){
    vector<int>ans;
    unordered_map<int, int>ump;
    for(int i=0; i<arr.size(); i++){
        if(ump.find(tar - arr[i]) != ump.end()){
            ans.emplace_back(i);
            ans.emplace_back(ump[tar - arr[i]]);
            return ans;
        }
        ump[arr[i]] = i;
    }
    return ans;
}
int main()
{
    vector<int>arr = {2,7,11,15};
    int tar = 9;
    vector<int>ans;
    ans = twoSum(arr, tar);
    for(int i=0; i<ans.size(); i++){
        cout<<ans[i]<<" ";
    }

    return 0;
}
