/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<vector>
#include<algorithm>
#include<unordered_map>
#include<set>
using namespace std;

//using sorting and binary search, tc:O(nlogn + n^3 logn), sc:O(1)
/*vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        
        sort(nums.begin(),nums.end());
      
       set<vector<int>> sv;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
    
                for(int k=j+1;k<n;k++)
                { 
                  
                   int x = (long long)target - 
                           (long long)nums[i]-
                           (long long)nums[j]-(long long)nums[k];
                   
                        if(binary_search(nums.begin()+k+1,nums.end(),x)){
                            vector<int> v;
                            v.push_back(nums[i]);
                            v.push_back(nums[j]);
                            v.push_back(nums[k]);
                            v.push_back(x);
                            sort(v.begin(),v.end());
                            sv.insert(v);
                        }
                }
            }
        }
        vector<vector<int>> res(sv.begin(),sv.end());
        return res;
    }*/
    
//optimal: tc:O(nlogn + n^3), sc:O(1)
vector<vector<int>>fourSum(vector<int>&arr, int tar){
    int n = arr.size();
    sort(arr.begin(), arr.end());
    vector<vector<int>>ans;
    for(int i=0; i<n; i++){
        int tar_3 = tar - arr[i];
        
        for(int j=i+1; j<n; j++){
            int tar_2 = tar_3 - arr[j];
            
            int front = j+1, back = n-1;
            
            while(front < back){
                int twoSum = arr[front] + arr[back];
                
                if(twoSum > tar_2) back--;
                
                else if(twoSum < tar_2) front++;
                
                else{
                    vector<int>v(4, 0);
                    v[0] = arr[i];
                    v[1] = arr[j];
                    v[2] = arr[front];
                    v[3] = arr[back];
                    ans.push_back(v);
                    
                    //to remove duplicate
                    
                    while(front<back && arr[front] == v[2]) front++;
                    while(back > front && arr[back] == v[3]) back--;
                }
            }
            //to remove duplicate of number 2
            while(j+1 < n && arr[j+1] == arr[j]) j++;
            }
            //to remove duplicate of number 3
            while(i+1 < n && arr[i+1] == arr[i]) i++;
        
    }
    return ans;
}
int main()
{
    vector<int>arr{1,0,-1,0,-2,2};
    int tar = 0;
    vector<vector<int>>ans;
    ans = fourSum(arr, tar);
    for(int i=0; i<ans.size(); i++){
        for(int j=0; j<ans[i].size(); j++){
            cout<<ans[i][j]<<" ";
        }
        cout<<endl;
    }

    return 0;
}
