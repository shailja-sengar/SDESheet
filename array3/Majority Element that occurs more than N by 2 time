#include <iostream>
#include<vector>
#include<unordered_map>
using namespace std;

//brute force: tc:O(n^2), sc:O(1)
/*int majorityEle(vector<int>&arr){
    int n = arr.size();
    vector<int>vis(n, 0);
    
    for(int i=0; i<n; i++){
        //if already visited
        if(vis[i] == 1){
            continue;
        }
        
        int cnt = 1;
        vis[i] = 1;
        for(int j=i+1; j<n; j++){
            if(arr[j] == arr[i])
                cnt++;
        }
        if(cnt > n/2)
            return arr[i];
    }
    return 0;
}*/

//efficient: tc:O(nlogn), sc:O(n)
/*int majorityEle(vector<int>&arr){
    int n = arr.size();
    unordered_map<int, int>freq;
    for(int i=0; i<n; i++){
        freq[arr[i]]++;
    }
    
    for(auto it=freq.begin(); it!=freq.end(); it++){
        if(it->second > n/2)
            return it->first;
    }
    return 0;
}*/

//optimal: using Moore's voting algorithm, tc:
int majorityEle(vector<int>&arr){
    int n = arr.size();
    int count=0;
    int candidate;
    
    for(int i=0; i<n; i++){
        if(count == 0)
            candidate = arr[i];
            
        if(arr[i] == candidate) count += 1;
        else count -= 1;
    }
    return candidate;
}
int main()
{
    vector<int>arr = {3,2,3};
    cout<<majorityEle(arr);

    return 0;
}
