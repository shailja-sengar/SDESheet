#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

//brute force: tc:O(n*m), sc:O(1)
/*bool isFound(vector<vector<int>>&matrix, int tar){
    int n = matrix.size();
    int m = matrix[0].size();
    
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(matrix[i][j] == tar){
                return true;
            }
        }
    }
    return false;
}*/

//optimal: using binary search, tc:O(log(n*m)), sc:O(1)
//we will assume this marix as linear array as given matrix is sorted row wise
bool isFound(vector<vector<int>>&matrix, int tar){
    int n = matrix.size();
    int m = matrix[0].size();
    
    int start = 0;
    int end = (n * m)-1; //for linear array ending position
    
    while(start <= end){
        int mid = start + (end - start)/2;
        
        int ele = matrix[mid/m][mid%m];  //find element in matrix through index which we got from linear array
        
        if(ele == tar){
            return true;
        }
        else if(ele < tar){
            start = mid + 1;
        }
        else{
            end = mid - 1;
        }
    }
    return false;
}
int main()
{
    vector<vector<int>>matrix = {{1,3,5,7},{10,11,16,20},{23,30,34,60}};
    int tar = 30;
    cout<<isFound(matrix, tar);
    
    return 0;
}
