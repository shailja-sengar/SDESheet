#include<iostream>
#include<vector>
using namespace std;

//brute force: tc:O(n^2), sc:O(1)
/*int countPairs(vector<int>&arr){
    int count=0;
    int n = arr.size();
    for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            if(arr[i] > 2*arr[j]){
                count++;
            }
        }
    }
    return count;
}*/

//optimal: using merge sort, tc:O(nlogn) + O(n) + O(n), sorting+ merging+ counting, sc:O(n)
int merge(int low, int mid, int high, vector<int>&arr){
    int count = 0;
    int j = mid +1;
    for(int i=low; i<=mid; i++){
        while(j<=high && arr[i] > 2LL*arr[j]){
            j++;
        }
        count += (j - (mid + 1));
    }
    
    vector<int>temp;
    int left=low, right=mid+1;
    while(left<=mid && right<=high){
        if(arr[left] <= arr[right]){
            temp.push_back(arr[left++]);
        }
        else{
            temp.push_back(arr[right++]);
        }
    }
    
    while(left<=mid){
        temp.push_back(arr[left++]);
    }
    while(right<=high){
        temp.push_back(arr[right++]);
    }
    
    for(int i=low; i<=high; i++){
        arr[i] = temp[i-low];
    }
    return count;
}
int mergeSort(int low, int high, vector<int>&arr){
    if(low >= high) return 0;
    int mid = (low + high)/2;
    int inv = mergeSort(low, mid, arr);
    inv += mergeSort(mid+1, high, arr);
    
    inv += merge(low, mid, high, arr);
    
    return inv;
}
int countPairs(vector<int>&arr){
    return mergeSort(0, arr.size()-1, arr);
}


int main(){
    vector<int>arr = {1,3,2,3,1};
    int n = arr.size();
    
    int ans = countPairs(arr);
    cout<<ans;
}
