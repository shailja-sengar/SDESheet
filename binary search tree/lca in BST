
#include <iostream>
using namespace std;

struct node{
    int data;
    node* right, *left;
};

node* newNode(int data){
    node* temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

node* lcaBST(node* root, node* p, node* q){
    int currNode = root->data;
    
    //when both the nodes are lesser than the root, search in only left subtree
    if(currNode > p->data && currNode > q->data)
        return lcaBST(root->left, p, q);
        
    //when both the nodes are greater than root, search in only right subtree
    else if(currNode < p->data && currNode < q->data)
        return lcaBST(root->right, p, q);
        
    //if one node is lesser and other is greater then the current node is the spliting point for both nodes, so this will be ans
    else
        return root;
}

int main()
{
    node* root = newNode(6);
    root->left = newNode(2);
    root->left->left = newNode(0);
    root->left->right = newNode(4);
    root->left->right->left = newNode(3);
    root->left->right->right = newNode(5);
    root->right = newNode(8);
    root->right->left = newNode(7);
    root->right->right = newNode(9);
    
    node* p = root->right->left;
    node* q = root->right->right;
    
    node* ans = lcaBST(root, p, q);
    cout<<ans->data;

    return 0;
}
