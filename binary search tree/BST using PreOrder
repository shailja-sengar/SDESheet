

#include <iostream>
#include<vector>
#include<algorithm>
#include<map>
#include<climits>
using namespace std;

struct node{
    int data;
    node* right, *left;
};

node* newNode(int data){
    node* temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

//tc: O(nlogn + n) sc:O(n)
/*node* buildBST(vector<int>&inOrder, int inStart, int inEnd, vector<int>&preOrder, int preStart, int preEnd, map<int,int>mp){
    if(inStart > inEnd || preStart > preEnd)
        return NULL;
        
    node* root = newNode(preOrder[preStart]);
    int rootIndex = mp[root->data];
    int leftEle = rootIndex - inStart;
    
    root->left = buildBST(inOrder, inStart, rootIndex-1, preOrder, preStart+1, preStart+leftEle, mp);
    root->right = buildBST(inOrder, rootIndex+1, inEnd, preOrder, preStart+leftEle+1, preEnd, mp);
    
    return root;
}
node* preOrderToBST(vector<int>&preOrder){
    vector<int>inOrder = preOrder;
    sort(inOrder.begin(), inOrder.end());
    
    int inStart = 0, inEnd = inOrder.size()-1;
    int preStart = 0, preEnd = preOrder.size()-1;
    map<int, int>mp;
    
    for(int i=0; i<inOrder.size(); i++){
        mp[inOrder[i]] = i;
    }
    
    return buildBST(inOrder, inStart, inEnd, preOrder, preStart, preEnd, mp);
    
}*/

//tc: O(n), sc:O(n)
node* preOrderToBSTHelper(vector<int>&preOrder, int &ind, int bound){
    if(ind == preOrder.size() || preOrder[ind] > bound)
        return NULL;
        
    node* root = newNode(preOrder[ind]);
    ind++;
    
    root->left = preOrderToBSTHelper(preOrder, ind, root->data);
    root->right = preOrderToBSTHelper(preOrder, ind, bound);
    
    return root;
}
node* preOrderToBST(vector<int>&preOrder){
    int i = 0;
    int bound = INT_MAX;
    return preOrderToBSTHelper(preOrder, i, bound);
}

void preOrderTravarse(node* root){
    if(root == NULL)
        return;
        
    cout<<root->data<<" ";
    preOrderTravarse(root->left);
    preOrderTravarse(root->right);
}
int main()
{
    vector<int>preOrder = {8, 5, 1, 7, 10, 12};
    
    node* root = preOrderToBST(preOrder);
    
    preOrderTravarse(root);

    return 0;
}
