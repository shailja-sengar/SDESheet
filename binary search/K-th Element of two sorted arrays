#include <iostream>
#include<vector>
#include<climits>
using namespace std;

//brute force: using merge sort, tc:(m+n), sc:O(1)
/*int kthElement(vector<int>&arr1, vector<int>&arr2, int m, int n, int k){
    int i=0, j=0;
    int ans = 0, count=0;
    
    while(i<m && j<n){
        if(count == k) break;
        else if(arr1[i] < arr2[j])
        {
            ans = arr1[i];
            ++i;
        }
        else{
            ans = arr2[j];
            ++j;
        }
        ++count;
    }
    
    while(i < m){
        if(count == k) break;
        ans = arr1[i];
        i++;
        count++;
    }
    
    while(j < m){
        if(count == k) break;
        ans = arr2[j];
        j++;
        count++;
    }
    return ans;
}*/

//optimal: tc:O(log(min(m, n))), sc:O(1)
int kthElement(vector<int>a, vector<int>b, int m, int n, int k){
    if(m > n)
        return kthElement(b, a, n, m, k);
    
    int start = max(0, k-n);
    int end = min(k, m);
    
    while(start <= end){
        int cut1 = start + (end - start)/2;
        int cut2 = k - cut1;
        
        int l1 = (cut1 == 0) ? INT_MIN : a[cut1-1];
        int l2 = (cut2 == 0) ? INT_MIN : b[cut2 - 1];
        
        int r1 = (cut1 == 0) ? INT_MAX : a[cut1];
        int r2 = (cut2 == 0) ? INT_MAX : b[cut2];
        
        if(l1 <= r2 && l2 <= r1)
            return max(l1, l2);
        
        else if(l1 > r2)
            end = cut1 - 1;
        
        else
            start = cut1 + 1;
    }
    return 0;
}
int main()
{
    vector<int>arr1 = {2,3,6,7,9};
    vector<int>arr2 = {1,4,8,10};
    int k = 7;
    int m = arr1.size();
    int n = arr2.size();
    
    cout<<kthElement(arr1, arr2, m, n, k);

    return 0;
}
