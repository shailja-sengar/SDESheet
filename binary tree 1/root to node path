
#include <iostream>
#include<vector>
using namespace std;

struct node{
  int data;
  node* right, *left;
};

node *newNode(int data){
    node* temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

//tc:O(n), sc:O(n)
bool rootToNode(node* root, vector<int>&ans, int val){
    //base if root is null means we didn't find any path return false
    if(root == NULL)
        return false;
        
    ans.push_back(root->data);
    if(root->data == val)
        return true;
        
    //if any of the sub tree left or right returns true we found path so return from that function
    if(rootToNode(root->left, ans, val) || rootToNode(root->right, ans, val))
        return true;
        
    //we don't find path then remove last pushed root->data
    ans.pop_back();
    
    return false;
}
int main()
{
    struct node *root = newNode(1);
    root -> left = newNode(2);
  root -> left -> left = newNode(4);
  root -> left -> right = newNode(5);
  root -> left -> right -> left = newNode(6);
  root -> left -> right -> right = newNode(7);
  root -> right = newNode(3);
  
  vector<int>ans;
  bool res;
  res = rootToNode(root, ans, 7);
  
  for(int i=0; i<ans.size(); i++){
      cout<<ans[i]<<" ";
  }

    return 0;
}
