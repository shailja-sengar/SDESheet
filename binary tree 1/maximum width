
#include <iostream>
#include<queue>
using namespace std;

struct node{
    int data;
    node* right, *left;
};

node* newNode(int data){
    node* temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

//tc: o(n), sc:O(n)
int maxWidth(node* root){
    int ans = 0;
    queue<pair<node*, int>>q;
    
    q.push({root, 0});
    
    while(!q.empty()){
        //size = all total nodes will be present of current level
        int size = q.size();
        int curMin = q.front().second;    //minimum will always be index of first node at current level
        int leftMost, rightMost;
        for(int i=0; i<size; i++){
            //for the current node right id so that we can avoid integer overflow
            int curId = q.front().second - curMin;
            //take out the first node and pop it
            node* temp = q.front().first;
            q.pop();
            
            //leftMost will be the first node 
            if(i==0) leftMost = curId;
            if(i==size-1) rightMost = curId;        //last node will be the last node of the queue 
            
            //push the left and right of the current node
            if(temp->left){
                q.push({
                    temp->left,
                    curId*2 + 1
                });
            }
            
            if(temp->right){
                q.push({
                    temp->right,
                    curId*2+2
                });
            }
            
        }
        ans = max(ans, (rightMost - leftMost +1));
    }
    
    return ans;
}
int main()
{
    node* root = newNode(1);
    root->left = newNode(7);
    root->left->left = newNode(9);
    root->left->right = newNode(2);
    root->left->left->left = newNode(11);
    root->left->left->right = newNode(10);
    root->left->right->left = newNode(9);
    root->left->right->right = newNode(6);
    
    root->right = newNode(10);
    root->right->left = newNode(2);
    root->right->right = newNode(7);
    root->right->left->left = newNode(1);
    root->right->left->right = newNode(7);
    root->right->right->left = newNode(6);
    root->right->right->right = newNode(10);
    
    cout<<maxWidth(root);

    return 0;
}
