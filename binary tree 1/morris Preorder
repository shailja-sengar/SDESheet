
#include <iostream>
#include<vector>
#include<stack>
using namespace std;

struct node{
    int data;
    struct node* right;
    struct node* left;
    
};

node* newNode(int data){
     node* temp = new node;
     temp->data = data;
     temp->left = NULL;
     temp->right = NULL;
    return temp;
}

//tc:O(n), sc:O(1)
vector<int>morrisPreorder(node* root){
    vector<int>ans;
    node* temp = root;
    
    while(temp != NULL){
        //case1: when no left sub tree, push the current root val and move right
        if(temp->left == NULL){
            ans.push_back(temp->data);
            temp = temp->right;
        }
        
        //case 2: when left subtree is present
        else{
            //find the rightmost node of left subtree
            node* prev = temp->left;
            
            //take prev to rightmost node, this rightmost should not point to current root
            while(prev->right && prev->right != temp){
                prev = prev->right;
            }
            
            //case 2.1 the rightmost node pointing to null connect with it to current root and push current root data then move to left subtree
            if(prev->right == NULL){
                prev->right = temp;
                 ans.push_back(temp->data);
                temp = temp->left;
            }
            
            //case 2.2 when the rightmost node is pointing to its root already it means we visited left subtree rempve this thread 
            // and right to current root
            else{
                prev->right = NULL;
               
                temp = temp->right;
            }
        }
    }
    
    return ans;
    
}



int main()
{
    struct node* root = newNode(1);
    root -> left = newNode(2);
  root -> right = newNode(3);
  root -> left -> left = newNode(4);
  root -> left -> right = newNode(5);
  root -> left -> right -> left = newNode(8);
  root -> right -> left = newNode(6);
  root -> right -> right = newNode(7);
  root -> right -> right -> left = newNode(9);
  root -> right -> right -> right = newNode(10);
  
  vector<int>arr = morrisPreorder(root);
  
  
  for(int i=0; i<arr.size(); i++){
      cout<<arr[i]<<" ";
  }

    return 0;
}
