
#include <iostream>
#include<vector>
using namespace std;

struct node{
    int data;
    node* right, *left;
};

node* newNode(int data){
    node* temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

//tc:O(n), sc:O(n) extra space for path1, path2
/*bool rootToNode(node* root, node* p, vector<int>&ans){
    if(root==NULL)
        return false;
    
    ans.push_back(root->data);
    if(root == p)
        return true;
    if(rootToNode(root->left, p, ans) || rootToNode(root->right, p, ans))
        return true;
        
    ans.pop_back();
    return false;
}

int lca(node*root, node* p, node* q){
    vector<int>ans1, ans2;
    
    bool res1 = rootToNode(root, p, ans1);
    bool res2 = rootToNode(root, q, ans2);
    
    if(ans1.size() < ans2.size())
    {
     for(int i=0; i<ans1.size(); i++){
         if(ans1[i] != ans2[i])
            return ans1[i-1];
     }   
    }
    else{
        for(int i=0; i<ans2.size(); i++){
            if(ans1[i] != ans2[i])
                return ans2[i-1];
        }
    }
    return 0;
    
}*/

//tc:O(n), sc:O(n) but no extra space
node* lca(node* root, node* p, node* q){
    if(root==NULL || root==p || root==q)
        return root;
        
    node* left = lca(root->left, p, q);
    node* right = lca(root->right, p, q);
    
    if(left == NULL)
        return right;
        
    else if(right == NULL)
        return left;
        
    else
        return root;
}
int main()
{
    node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->right->left = newNode(4);
    root->right->left->left = newNode(8);
    root->right->right = newNode(5);
    root->right->right->left = newNode(6);
    root->right->right->right = newNode(7);
    
    node* p = root->right->right->right;
    node* q = root->right->left->left;
    node* ans = lca(root, p, q);
    cout<<ans->data;
    
    //cout<<lca(root, p, q);
    return 0;
}
