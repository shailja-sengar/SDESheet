
#include <iostream>
#include<vector>
#include<map>
using namespace std;
struct node{
    int data;
    node* right, *left;
};

node* newNode(int data){
    node* temp  = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

//using recursion , tc:O(n), sc:O(n)
/*void flattenToLL(node* root, node* & prev){
    if(root==NULL)
        return;
    
    flattenToLL(root->right, prev);
    flattenToLL(root->left, prev);
    
    root->right = prev;
    root->left = NULL;
    
    prev = root;
}*/

//using morris travarsal, tc:O(n), sc:O(1)
void flattenToLL(node* root, node* &prev){
    node* cur = root;
    
    while(cur != NULL){
        if(cur->left != NULL){
            node* temp = cur->left;
            
            while(temp->right != NULL){
                temp = temp->right;
            }
            temp->right = cur->right;
            cur->right = cur->left;
        }
        cur = cur->right;
    }
}

int main()
{
    node* root = newNode(1);
    root->left = newNode(2);
    root->left->left = newNode(3);
    root->left->right = newNode(4);
    root->right = newNode(5);
    root->right->right = newNode(6);
    root->right->right->left = newNode(7);
    node* prev = NULL;
    flattenToLL(root, prev);
    
    while(root->right!=NULL)
  {
      cout<<root->data<<"->";
      root=root->right;
  }
cout<<root->data;
    return 0;
}
