
#include <iostream>
#include<climits>
#include<vector>
#include<map>
using namespace std;

struct node{
    int data;
    node* right, *left;
};

node* newNode(int data){
    node* temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

//tc:O(n), sc:O(n)
bool helper(node* root1, node* root2){
    if(root1==NULL && root2==NULL)
        return true;
    
    if(root1==NULL || root2==NULL)
        return false;
        
    if(root1->data != root2->data)
        return false;
        
    return (root1->left, root2->right) && (root1->right, root2->left);
}
bool isSymmetric(node* root){
    if(root == NULL)
        return true;
    return helper(root->left, root->right);
}

int main()
{
  node * root = newNode(1);
  root -> left = newNode(2);
  root -> left -> left = newNode(3);
  root -> left -> right = newNode(4);
  root -> right = newNode(2);
  root -> right -> left = newNode(4);
  root -> right -> right = newNode(3);
  
  cout<<isSymmetric(root);
  
    return 0;
}
