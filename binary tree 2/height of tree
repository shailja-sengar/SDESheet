
#include <iostream>
#include<queue>
using namespace std;

struct node{
    int data;
    node* right, *left;
};

node* newNode(int data){
    node* temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

//using level order : tc:O(n), sc:O(n)
/*int heightOfTree(node* root){
    int level=0; 
        
        if(root == NULL) 
            return level; 
          
        queue<node*> q; 
        q.push(root); 
        
        while(!q.empty()) {
           int size = q.size();
           
           for(int i=0; i<size; i++){
               node* temp = q.front();
               q.pop();
               
               if(temp->left)
                    q.push(temp->left);
                    
                if(temp->right)
                    q.push(temp->right);
           }
                
            level++;
        }
        return level;
}*/

//using post order, tc:O(n), sc:O(1)
int heightOfTree(node* root){
    if(root==NULL)
        return 0;
        
    int lh = heightOfTree(root->left);
    int rh = heightOfTree(root->right);
    
    return 1 + max(lh, rh);
}
int main()
{
    node* root = newNode(1);
    root->left = newNode(7);
    root->left->left = newNode(9);
    root->left->right = newNode(2);
    root->left->left->left = newNode(11);
    root->left->left->right = newNode(10);
    root->left->right->left = newNode(9);
    root->left->right->right = newNode(6);
    
    root->right = newNode(10);
    root->right->left = newNode(2);
    root->right->right = newNode(7);
    root->right->left->left = newNode(1);
    root->right->left->right = newNode(7);
    root->right->right->left = newNode(6);
    root->right->right->right = newNode(10);
    
    cout<<heightOfTree(root);
    
    
    return 0;
}
