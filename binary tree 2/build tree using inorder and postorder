
#include <iostream>
#include<vector>
#include<map>
using namespace std;
struct node{
    int data;
    node* right, *left;
};

node* newNode(int data){
    node* temp  = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

node* constructTree(vector<int>&inorder, int inStart, int inLast, vector<int>&postOrder, int postStart, int postLast,
                    map<int, int>&mp){
        
        if(inStart > inLast || postStart > postLast)
            return NULL;
            
        node* root = newNode(postOrder[postLast]);
        int rootIndex = mp[root->data];
        int leftEle = rootIndex - inStart;
        
        root->left = constructTree(inorder, inStart, rootIndex-1, postOrder, postStart, postStart+leftEle-1, mp);
        root->right = constructTree(inorder, rootIndex+1, inLast, postOrder, postStart+leftEle, postLast-1, mp);
        
        return root;
}
node* buildTree(vector<int>&inorder, vector<int>&postOrder){
    map<int, int>mp;
    int inStart=0, inLast = inorder.size()-1;
    int postStart=0, postLast = postOrder.size()-1;
    
    for(int i=0; i<inorder.size();i++){
        mp[inorder[i]] = i;
    }
    
    return constructTree(inorder, inStart, inLast, postOrder, postStart, postLast, mp);
}

void inorderTravarsal(node* root){
    if(root==NULL)
        return;
        
    inorderTravarsal(root->left);
    cout<<root->data<<" ";
    inorderTravarsal(root->right);
}
int main()
{
    vector<int>inorder = {9,3,15,20,7};
    vector<int>postOrder = {9,15,7,20,3};
    
    node* root = buildTree(inorder, postOrder);
    
    inorderTravarsal(root);
    
    return 0;
}
