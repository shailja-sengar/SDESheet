
#include <iostream>
#include<queue>
using namespace std;

struct node{
    int data;
    node* right, *left;
};

node* newNode(int data){
    node* temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

//tc:O(n^2), sc:O(1)
/*int maxDiameter = 0;
int heightOfTree(node* root){
    if(root==NULL)
        return 0;
        
    int lh = heightOfTree(root->left);
    int rh = heightOfTree(root->right);
    
    return 1 + max(lh, rh);
}

void diameterOfTree(node* root){
    if(root==NULL)
        return ;
        
    //find the left subtree height and right subtree height
    int lh = heightOfTree(root->left);
    int rh = heightOfTree(root->right);
    
    //find the diameter for the current node
    int diameter = lh + rh;
    
    //update the maximum diameter after finding for each current node
    maxDiameter = max(maxDiameter, diameter);
    
    //go to the left and right side and find the diameter for each node
    diameterOfTree(root->left);
    diameterOfTree(root->right);
}*/

//tc:O(n), sc:O(1)
int diameterOfTree(node* root, int &maxi){
    if(root==NULL)
        return 0;
        
    int lh = diameterOfTree(root->left, maxi);
    int rh = diameterOfTree(root->right, maxi);
    
    //while calculating the height of the tree of current node find the diameter of that node at that time only
    maxi = max(maxi, (lh+rh));
    
    return 1 + max(lh, rh);
}
int main()
{
    node* root = newNode(4);
    root->left = newNode(7);
    
    root->right = newNode(10);
    root->right->left = newNode(2);
    root->right->right = newNode(7);
    root->right->left->left = newNode(1);
    root->right->left->left->left = newNode(5);
    root->right->right->right = newNode(10);
    root->right->right->left = newNode(2);
    root->right->right->left->left = newNode(0);
    root->right->right->right = newNode(11);
    
    int maxi = 0;
    diameterOfTree(root, maxi);
    cout<<maxi;
    
    return 0;
}
