
#include <iostream>
#include<queue>
using namespace std;

struct node{
    int data;
    node* right, *left;
};

node* newNode(int data){
    node* temp = new node;
    temp->data = data;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

//tc:O(n^2), sc:O(1)
/*int maxDiameter = 0;
int heightOfTree(node* root){
    if(root==NULL)
        return 0;
        
    int lh = heightOfTree(root->left);
    int rh = heightOfTree(root->right);
    
    return 1 + max(lh, rh);
}

bool isBalanced(node* root){
    if(root==NULL)
        return true;
        
    //find the left subtree height and right subtree height
    int lh = heightOfTree(root->left);
    int rh = heightOfTree(root->right);
    
    //find the diameter for the current node
    if((lh-rh) > 1)
        return false;
    
    //go to the left and right side and find the  for each node
    return isBalanced(root->left) && 
                  isBalanced(root->right);
}*/

//tc:O(n), sc:O(1)
int height(node* root){
    if(root == NULL)
        return 0;
        
    int lh = height(root->left);
    if(lh == -1)
        return -1;
        
    int rh = height(root->right);
    if(rh == -1)
        return -1;
    
    if(abs(lh-rh) > 1)
        return -1;
    
    return max(lh, rh) + 1;
}
bool isBalanced(node* root){
    return height(root) != -1;
}
int main()
{
    node* root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->left->left->left = newNode(8);
    
    //int maxi = 0;
    cout<<isBalanced(root);
    //cout<<maxi;
    
    return 0;
}
