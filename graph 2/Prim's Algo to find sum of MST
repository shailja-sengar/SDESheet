
#include <iostream>
#include<vector>
#include<queue>
using namespace std;

int primsAlgo(int V, vector<vector<int>>&graph){
    //first make the adjacancy list
    vector<vector<int>>adj[V];
    for(auto it : graph){
        adj[it[0]].push_back({it[1], it[2]});
        adj[it[1]].push_back({it[0], it[2]});
    }
    
    //Step1 : define min heap as pair<weight, node>
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;
    vector<int>vis(V, 0);
    
    pq.push({0, 0});
    int sum = 0;
    
    while(!pq.empty()){
        auto it = pq.top();
        pq.pop();
        
        int node = it.second;
        int wt = it.first;
        
        //if current node is already visited no need to do anything move to the next iteration
        if(vis[node] == 1)
            continue;
            
        //make the current node as visited and add it;s weight to the final sum
        vis[node] = 1;
        sum += wt;
        
        for(auto it : adj[node]){
            int adjNode = it[0];
            int eWt = it[1];
            
            if(!vis[adjNode])
                pq.push({eWt, adjNode});
        }    
    }
    
    return sum;
}
int main()
{
    int V = 5;
    
    vector<vector<int>>graph = {{0, 1, 2}, {0, 2, 1}, {1, 2, 1}, {2, 3, 2}, {3, 4, 1}, {4, 2, 2}};
    
    cout<<primsAlgo(V, graph);

    return 0;
}
