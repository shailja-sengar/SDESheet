#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

//tc: O(n) +O(n log n) + O(n) ~O(n log n), sc:O(n)
struct meeting{
    int start;
    int end;
    int pos;
};

bool comp(meeting m1, meeting m2){
    if(m1.end < m2.end) return true;
    if(m1.end > m2.end) return false;
    if(m1.pos < m2.pos) return true;
    
    return false;
 }
vector<int>nMeeting(vector<int>&s, vector<int>&e, int n){
    struct meeting meet[n];
    for(int i=0; i<n; i++){
        meet[i].start = s[i];
        meet[i].end =  e[i];
        meet[i].pos = i+1;
    }
    
    sort(meet, meet+n, comp);
    
    vector<int>ans;
    int limit = meet[0].end;
    ans.push_back(meet[0].pos);
    
    for(int i=1; i<n; i++){
        if(meet[i].start > limit){
            limit = meet[i].end;
            ans.push_back(meet[i].pos);
        }
    }
    return ans;
}
int main()
{
    int n = 6;
    vector<int>s = {1,3,0,5,8,5};
    vector<int>e = {2,4,5,7,9,9};
    
    vector<int>ans = nMeeting(s, e, n);
    
    for(int i=0; i<ans.size(); i++){
        cout<<ans[i]<<" ";
    }

    return 0;
}
