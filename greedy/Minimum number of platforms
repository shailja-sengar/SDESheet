#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

//brute force: tc:O(n^2), sc:O(1)
/*int needPlatform(vector<int>&s, vector<int>&e, int n){
    int platform = 1;
    for(int i=0; i<n; i++){
        int currPlatform = 1;
        for(int j=i+1; j<n; j++){
            if((s[i] >= s[j] && e[i] <= e[j]) || (s[j] >= s[i] && e[j] <= e[i])){
                currPlatform++;
            }
            platform = max(platform, currPlatform);
        }
    }
    return platform;
}*/

//optimal: tc:O(nlogn)+O(n) ~ o(nlog n), tc:O(1)
int needPlatform(vector<int>&s, vector<int>&e, int n){
    sort(s.begin(), s.end());
    sort(e.begin(), e.end());
    
    int i=1, j=0;
    int platform=1;
    int currPlatform =1;
    while(i<n && j<n){
        if(s[i] <= e[j]){
            currPlatform++;
            i++;
        }
        else{
            currPlatform--;
            j++;
        }
        platform = max(platform, currPlatform);
    }
    return platform;
}
int main()
{
    int n = 6;
    vector<int>s = {900,945,955,1100,1500,1800};
    vector<int>e = {920,1200,1130,1150,1900,2000};
    
    int ans = needPlatform(s, e, n);
    
    cout<<ans;

    return 0;
}
