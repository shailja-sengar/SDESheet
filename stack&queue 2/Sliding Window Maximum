#include<iostream>
#include<queue>
#include<vector>
#include<climits>
using namespace std;

//brute force: tc:O(n^2), sc:O(1)
/*vector<int>windowMaximum(vector<int>&arr, int k){
    vector<int>ans;
    int n = arr.size();
    for(int i=0; i<=n-2; i++){
        int maxEle = arr[i];
        
        for(int j=i; j<=(i+k-1); j++){
            maxEle = max(maxEle, arr[j]);
        }
        ans.push_back(maxEle);
    }
    
    return ans;
}*/

//optimal: using dequeue, tc:O(n), sc:O(k)
vector<int>windowMaximum(vector<int>&arr, int k){
    deque<int>dq;
    vector<int>ans;
    int n = arr.size();
    
    for(int i=0; i<n; i++){
        //to check boundary if we store the element in front that is not present in k size window
        if(!dq.empty() && dq.front() == i-k)
            dq.pop_front();
            
        //pop the element from back if they are lesser than the current element
        while(!dq.empty() && arr[dq.back()] < arr[i])
            dq.pop_back();
            
        //push the elemnt's index if it is greater than the back elements
        dq.push_back(i);
        
        //check maximum for each k size window
        if(i >= k-1) 
            ans.push_back(arr[dq.front()]);
    }
    
    return ans;
}
int main(){
    vector<int>arr = {4,0,-1,3,5,3,6,8};
    int k = 3;
    
    vector<int>ans = windowMaximum(arr, k);
    
    for(int i=0; i<ans.size(); i++){
        cout<<ans[i]<<" ";
    }
}
