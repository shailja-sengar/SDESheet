#include<iostream>
#include<vector>
#include<stack>
using namespace std;

//brute force: tc:O(n^2), sc:O(1)
/*vector<int>stockSpan(vector<int>&price){
    vector<int>ans;
    int days;
    
    for(int i=0; i<price.size(); i++){
        int currPrice = price[i];
        days = 1;
        for(int j=i-1; j>=0; j--){
            if(price[j] < currPrice)
                days++;
            else
                break;
        }
        ans.push_back(days);
    }
    
    return ans;
}*/

//optimal: using stack, tc:O(n), sc:O(n)
//same as find previous greater element
vector<int>stockSpan(vector<int>&price){
    stack<int>st;
    vector<int>ans(price.size());
    ans[0] = 1;
    st.push(0);
    for(int i=1; i<price.size(); i++){
        while(!st.empty() && price[st.top()] <= price[i])
            st.pop();
            
        if(!st.empty())
            ans[i] = i - st.top();
        
        else
            ans[i] = i+1;
        
        st.push(i);
    }
    
    return ans;
}
int main(){
    vector<int>price = {100, 80, 60, 70, 60, 75, 85};
    vector<int>ans = stockSpan(price);
    
    for(int i=0; i<ans.size(); i++){
        cout<<ans[i]<<" ";
    }
}
