
#include <iostream>
#include<vector>
#include<queue>
using namespace std;

//brute force: using insertion sort and binary search, tc:O(n^2), sc:O(1)
/*int binarySearch(vector<int>&arr, int start, int end, int num){
    while(start <= end){
        int mid = start + (end-start)/2;
        
        if(arr[mid] < num){
            start = mid + 1;
        }
        else{
            end = mid-1;
        }
    }
    return start;
}
void median(vector<int>&arr){
    int n = arr.size();
    int i, j, pos, cnt=1;
    cout<<arr[0]<<" ";
    
    for(i=1; i<n; i++){
        int medi;
        j = i-1;
        int num = arr[i];
        
        pos = binarySearch(arr, 0, j, num);
        
        while(j>=pos){
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = num;
        cnt++;
        
        if(cnt%2 != 0){
            cout<<arr[cnt/2]<<" ";
        }
        else{
            cout<<(arr[cnt/2 - 1] + arr[cnt/2]) /2<<" ";
        }
    }
}*/

//optimal:using max headp  tc:O(nlogn), sc:O(n)
void median(vector<int>&arr){
    priority_queue<int>g, s;
    int n = arr.size();
    for(int i=0; i<n; i++){
        s.push(arr[i]);
        int temp = s.top();
        s.pop();
        
        //treating as min heap
        g.push(-1*temp);
        
        if(g.size() > s.size()){
            temp = g.top();
            g.pop();
            s.push(-1*temp);
        }
        
        if(g.size() != s.size())
            cout<<s.top()<<" ";
        else{
            cout<<((s.top()*1) - (g.top()*1))/2<<" ";
        }
    }
}
int main(){
    vector<int>arr = {6,2,1,3,7,5};
    
    median(arr);
    return 0;
}
