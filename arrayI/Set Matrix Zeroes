#include <iostream>
#include<vector>
using namespace std;

//using brute force, tc: O((n*m) * (n*m)), sc:o(1)
void setZero(vector < vector < int >> & matrix) {
  int rows = matrix.size(), cols = matrix[0].size();
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      if (matrix[i][j] == 0) {

        int ind = i - 1;
        while (ind >= 0) {
          if (matrix[ind][j] != 0) {
            matrix[ind][j] = -1;
          }
          ind--;
        }
        ind = i + 1;
        while (ind < rows) {
          if (matrix[ind][j] != 0) {
            matrix[ind][j] = -1;
          }
          ind++;
        }
        ind = j - 1;
        while (ind >= 0) {
          if (matrix[i][ind] != 0) {
            matrix[i][ind] = -1;

          }
          ind--;
        }
        ind = j + 1;
        while (ind < cols) {
          if (matrix[i][ind] != 0) {
            matrix[i][ind] = -1;

          }
          ind++;
        }
      }
    }
  }
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      if (matrix[i][j] <= 0) {
        matrix[i][j] = 0;
      }
    }
  }

}
//********************************************************XXXXXXXX******************************************

//better approach, tc:o((n*m) + (n*m)), sc:O(n)
void setZero(vector<(vector)<int>>&v){
    int m=v.size();
        int n=v[0].size();
        int row[m];
        int col[n];
        
        for(int i=0;i<m;i++)
            row[i]=false;
        
        
        for(int i=0;i<n;i++)
            col[i]=false;
        
         for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(v[i][j]==0)
                {
                    row[i]=true;
                    col[j]=true;
                }
            }
         }
        
         for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if( row[i]==true  ||  col[j]==true)
                {
                    v[i][j]=0;
                }
            }
         }
}
//***********************************************************************

//optimized approach, tc:O(2*(n*m)), sc:O(1)
void setZero(vector<vector<int>>&matrix){
    int row = matrix.size();
    int col = matrix[0].size();
    int col0 = 1;
    for(int i=0; i<row; i++){
        if(matrix[i][0] == 0) col0 = 0;
        for(int j=1; j<col; j++){
            if(matrix[i][j]==0){
                matrix[i][0] = 0;
                matrix[0][j] = 0;
            }
        }
    }
    
    //travarse in reverse direction
    for(int i=row-1; i>=0; i--){
        for(int j=col-1; j>=1; j--){
            if(matrix[i][0]==0 || matrix[0][j]==0){
                matrix[i][j]=0;
            }
        }
        if(col0=0){
            matrix[i][0] = 0;
        }
    }
}


int main()
{
    int m, n;
    cout<<"Enter the number of row: "<<endl;
    cin>>m;
    cout<<"Enter the number of column: "<<endl;
    cin>>n;
    vector<vector<int>>matrix(m, vector<int>(n));
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            cin>>matrix[i][j];
        }
        cout<<endl;
    }
    
    setZero(matrix);
    cout<<"After the applying the function set zero matrix would be: "<<endl;
    for(int i=0; i<m; i++){
        for(int j=0; j<n; j++){
            cout<<matrix[i][j]<<" ";
        }
        cout<<endl;
    }

    return 0;
}
