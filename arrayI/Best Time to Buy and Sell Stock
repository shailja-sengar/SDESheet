#include <iostream>
#include<vector>
#include<climits>
using namespace std;

//brute force: tc:O(n^2), sc:O(1)
/*int max(int a, int b){
    if(a > b){
        return a;
    }
    return b;
}
int maxProfit(vector<int>&prices){
    int n = prices.size();
    int maxPro = 0;
    for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            if(prices[j] > prices[i]){
                int currPro = prices[j] - prices[i];
                maxPro = max(maxPro, currPro);
            }
        }
    }
    return maxPro;
}*/

//optimal approach: tc:O(n), sc:O(1)
int max(int a, int b){
    if(a > b){
        return a;
    }
    return b;
}

int min(int a, int b){
    if(a < b){
        return a;
    }
    return b;
}
int maxProfit(vector<int>&prices){
    int maxPro = 0;
    int n = prices.size();
    int minPrice = INT_MAX;
    
    for(int i=0; i<n; i++){
        minPrice = min(minPrice, prices[i]);
        int currPro = prices[i] - minPrice;
        maxPro = max(maxPro, currPro);
    }
    return maxPro;
}
int main()
{
    vector<int>prices = {7,1,5,3,6,4};
    cout<<"Max Profit is: "<<maxProfit(prices)<<endl;

    return 0;
}
