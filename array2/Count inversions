#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

//brute force: tc:O(n^2), sc:O(1)
/*int inversion(vector<int>&nums){
    int n = nums.size();
    int cnt=0;
    for(int i=0; i<n; i++){
        for(int j=i+1; j<n; j++){
            if(nums[i] > nums[j]){
                cnt++;
            }
        }
    }
    return cnt;
}*/

//optimal: using merge sort tc:O(nlgn), sc:O(n)
int merge(vector<int>&nums, vector<int>temp, int low, int mid, int high){
    int invCount = 0;
    int i = low;
    int j = mid;
    int k = low;
    while((i <= mid-1) && (j <= high)){
        if(nums[i] <= nums[j]){
            temp[k++] = nums[i++];
        }
        else{
            temp[k++] = nums[j++];
            invCount = invCount + (mid-i);
        }
    }
    
    while(i<=mid-1){
        temp[k++] = nums[i++];
    }
    
    while(j<=high){
        temp[k++] = nums[j++];
    }
    
    for(int i=low; i<=high; i++){
        nums[i] = temp[i];
    }
    return invCount;
}
int mergeSort(vector<int>&nums, vector<int>temp, int low, int high){
    int mid, invCount=0;
    
    if(low < high){
        mid = (low + high)/2;
        
        invCount += mergeSort(nums, temp, low, mid);
        invCount += mergeSort(nums, temp, mid+1, high);
        
        invCount += merge(nums, temp, low, mid+1, high);
        
    }
    return invCount;
}
int main()
{
    vector<int>nums = {5,3,2,1,4};
    int n = nums.size();
    vector<int>temp(n);
    int ans = mergeSort(nums, temp, 0, n-1);
    cout<<ans;
    
    return 0;
}
