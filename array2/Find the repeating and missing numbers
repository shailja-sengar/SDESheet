#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

//brute force: using sorting, tc:O(nlogn), sc:O(1)


//using count sort: tc:o(n), sc:O(n)
/*vector<int>findNum(vector<int>&nums){
    int n = nums.size();
    vector<int>freq(n+1, 0);
    vector<int>ans;
    for(int i=0; i<n; i++){
        freq[nums[i]] += 1;
    }
    
    for(int i=1;i<=n;i++){
        if(freq[i] == 0){
            ans.push_back(i);
        }
        if(freq[i] == 2){
            ans.push_back(i);
        }
    }
    return ans;
}*/

//using maths: tc:O(n), sc:O(1)
/*vector<int>findNum(vector<int>&nums){
    long long int n = nums.size();
    
    long long int s = (n * (n+1)) / 2;
    long long int p = (n * (n+1) * (2*n + 1))/6;
    int missingNum=0, repeatingNum=0;
    vector<int>ans;
    
    for(int i=0; i<n; i++){
        s -= (long long int)nums[i];
        p -= (long long int)nums[i] * (long long int)nums[i];
    }
    
    missingNum = (s + p/s)/2;
    repeatingNum = missingNum - s;
    
    ans.push_back(missingNum);
    ans.push_back(repeatingNum);
    
    return ans;
}*/

//using XOR : tc:O(n), sc:O(1)

int main()
{
    vector<int>nums = {3,1,2,5,4,6,7,5};
    vector<int>ans;
    ans = findNum(nums);
    for(int i=0; i<ans.size();i++){
        cout<<ans[i]<<" ";
    }
    
    return 0;
}
