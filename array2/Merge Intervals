#include <iostream>
#include<vector>
#include<algorithm>
using namespace std;

//brute force: tc:O((nlogn) + (n*n)), sc:O(n)
/*vector<vector<int>>mergeIntervals(vector<vector<int>>&nums){
    int n = nums.size();
    
    //step 1: sort the array
    sort(nums.begin(), nums.end());
    vector<vector<int>>ans;
    
    for(int i=0; i<n; i++){
        int start = nums[i][0];
        int end = nums[i][1];
        
        //if ans vector is not empty then we comapre
        if(!ans.empty()){
            if(start <= ans.back()[1]){
                continue;
            }
        }
        
        for(int j=i+1; j<n; j++){
            if(nums[j][0] <= end){
                end = max(end, nums[j][1]);
            }
        }
        end  = max(end, nums[i][1]);
        ans.push_back({start, end});
    }
    return ans;
}*/

//optimal: tc:O((nlog n) + (n)), sc: O(n)
vector<vector<int>>mergeIntervals(vector<vector<int>>&nums){
    int n = nums.size();
    sort(nums.begin(), nums.end());
    vector<vector<int>>ans;
    ans.push_back(nums[0]);
    int j=0;
    for(int i=1; i<n; i++){
        if(ans.empty() || nums[i][0] <= ans[j][1]){
            ans[j][1] = max(ans[j][1], nums[i][1]);
        }
        else{
            j++;
            ans.push_back(nums[i]);
        }
    }
    return ans;
}
int main()
{
    vector<vector<int>>nums = {{1,3},{2,4},{2,6},{8,9}, {8,10},{9,11},{15,18},{16,17}};
    vector<vector<int>>merged;
    merged = mergeIntervals(nums);
    for(int i=0; i<merged.size(); i++){
        for(int j=0; j<merged[0].size(); j++){
            cout<<merged[i][j]<<" ";
        }
        cout<<endl;
    }

    return 0;
}
