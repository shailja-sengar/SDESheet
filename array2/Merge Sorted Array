#include<iostream>
#include<vector>
using namespace std;

//brute force: tc:O(n), sc:o(m+n)
/*vector<int>mergeArray(vector<int>&nums1, vector<int>&nums2){
    int m=nums1.size();
    int n = nums2.size();
    vector<int>helpArr;
    int i=0, j=0;
    while(i <= (m-1) && j<=(n-1)){
        if(nums1[i] < nums2[j]){
            helpArr.push_back(nums1[i]);
            i++;
        }
        else{
            helpArr.push_back(nums2[j]);
            j++;
        }
    }
    
    while(i < m && j>=n){
        helpArr.push_back(nums1[i]);
        i++;
    }
    while(i >= m && j < n){
        helpArr.push_back(nums2[j]);
        j++;
    }
    nums1.clear();
    for(int i=0; i<(m+n); i++){
        nums1.push_back(helpArr[i]);
    }
    return nums1;
}*/

//optimal: tc:(n), sc:o(1);
vector<int>mergeArray(vector<int>&nums1, vector<int>&nums2){
    int m = 3;
    int n = nums2.size();
    int i=m-1, j=n-1, k = m+n-1;
    
    while(i>=0 && j>=0){
        if(nums1[i] > nums2[j]){
            nums1[k] = nums1[i];
            k--, i--;
        }
        else{
            nums1[k] = nums2[j];
            k--, j--;
        }
    }
    while(i>=0){
        nums1[k] = nums1[i];
        k--, i--;
    }
    while(j>=0){
        nums1[k] = nums2[j];
        k--, j--;
    }
    return nums1;
}
int main(){
    vector<int>nums1 = {1,2,3,0,0,0};
    vector<int>nums2 = {2,4,5};
    
    vector<int>mergedArr = mergeArray(nums1, nums2);
    
    for(int i=0; i<mergedArr.size(); i++){
        cout<<mergedArr[i]<<" ";
    }
}
