
#include <iostream>
#include<vector>
#include<queue>
using namespace std;

bool detectCycelDFS(int src, int parent, int vis[], vector<int>adj[]){
    //Step1: make cuurent source node visited
    vis[src] = 1;
    
    //go to last node of current node
    for(auto adjacentNode : adj[src]){
        //if node is not visited
        if(!vis[adjacentNode]){
            //call it's deep node with give the parent as current node
            if(detectCycelDFS(adjacentNode, src, vis, adj))
                return true;
        }
        else if(parent != adjacentNode)
            return true;
    }
    return false;
}
bool isCycle(int V, vector<int>adj[]){
    int vis[V] = {0};
    //graph can have multiple componenet so if any component has cycle we return true
    for(int i=0; i<V; i++){
        if(!vis[i]){
            if(detectCycelDFS(i, -1, vis, adj))
                return true;
        }
    }
    return false;
}
int main()
{
    vector<int>adj[4] = {{}, {2}, {1, 3}, {2}};
    
    cout<<isCycle(4, adj);
    

    return 0;
}
