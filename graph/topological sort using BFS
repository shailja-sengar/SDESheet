
#include <iostream>
#include<vector>
#include<queue>
using namespace std;

vector<int> topoSortBFS(int V, vector<int>adj[]){
    //Step1: find the indegree of each node
    int indegree[V] = {0};
    for(int i=0; i<V; i++){
        for(auto it : adj[i])
            indegree[it]++;
    }
    
    //Step2: make a queue which stores only those nodes whose indegree is 0
    queue<int>q;
    for(int i=0; i<V; i++){
        if(indegree[i] == 0)
            q.push(i);
    }
    
    //keep a vector for topological sort
    vector<int>topo;
    
    //Step3: run a loop till q is not empty
    while(!q.empty()){
        int node = q.front();
        q.pop();
        topo.push_back(node);
        
        for(auto adjacentNode : adj[node]){
            //decrease the indegree of adjacentNode
            indegree[adjacentNode]--;
            if(indegree[adjacentNode] == 0)
                q.push(adjacentNode);
        }
    }
    
    return topo;
    
}
int main()
{
    vector<int>adj[6] = {{}, {}, {3}, {1}, {1, 0}, {0, 2}};
    
    vector<int>topo = topoSortBFS(6, adj);
    
    for(int i=0; i<topo.size(); i++){
        cout<<topo[i]<<" ";
    }

    return 0;
}
