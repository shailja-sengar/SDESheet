
#include <iostream>
#include<vector>
#include<queue>
using namespace std;

bool isCycleBFS(int V, vector<int>adj[]){
    //Step1: find the indegree of each node
    int indegree[V] = {0};
    for(int i=0; i<V; i++){
        for(auto it : adj[i])
            indegree[it]++;
    }
    
    //Step2: make a queue which stores only those nodes whose indegree is 0
    queue<int>q;
    for(int i=0; i<V; i++){
        if(indegree[i] == 0)
            q.push(i);
    }
    
    //keep a counter for topological sort
    int cnt = 0;
    
    //Step3: run a loop till q is not empty
    while(!q.empty()){
        int node = q.front();
        q.pop();
        cnt++;
        
        for(auto adjacentNode : adj[node]){
            //decrease the indegree of adjacentNode
            indegree[adjacentNode]--;
            if(indegree[adjacentNode] == 0)
                q.push(adjacentNode);
        }
    }
    
    if(cnt == V) return false;
    
    return true;
    
}
int main()
{
    vector<int>adj[11] = {{}, {2}, {3}, {4, 7}, {5}, {6}, {}, {5}, {9}, {10}, {8}};
    
    cout<<isCycleBFS(11, adj);

    return 0;
}
