
#include <iostream>
#include<vector>
using namespace std;

//tc: O(nxm), sc:O(nxm)
void dfs(int row, int col, int iniColor, int newColor, int delRow[], int delCol[], int m, int n, 
            vector<vector<int>>&ans, vector<vector<int>>&image){
                
            //step1: assign new color into the current row and col in the ans vector
            ans[row][col] = newColor;
            
            //Step2: for the current cell of the image matrix go to all the 4 directions and repeat the same process
            for(int i=0; i<4; i++){
                //Step3: to go to new direction find the new row and new column
                int nRow = row + delRow[i];
                int nCol = col + delCol[i];
                
                //Step4: check all the boundary conditions for the new Row and new col
                if(nRow>=0 && nRow<m && nCol>=0 && nCol<n && image[nRow][nCol] == iniColor && ans[nRow][nCol] != newColor){
                    
                    dfs(nRow, nCol, iniColor, newColor, delRow, delCol, m, n, ans, image);
                }
            }
}

vector<vector<int>>floodFill(vector<vector<int>>&image, int sr, int sc, int color){
    vector<vector<int>>ans = image;
    
    //all 4 directions
    int delRow[] = {-1, 0, +1, 0};
    int delCol[] = {0, +1, 0, -1};
    int iniColor = image[sr][sc];
    int newColor = color;
    int m = image.size();
    int n = image[0].size();
    
    dfs(sr, sc, iniColor, newColor, delRow, delCol, m, n, ans, image);
    
    return ans;
}
int main()
{
    int m, n;
    m = 3;
    n = 3;
    
    vector<vector<int>>image = {
                                {1, 1, 1},
                                {1, 1, 0},
                                {1, 0, 1}
                            };
                            
    int sr = 1;
    int sc = 1;
    int color = 2;
    
    vector<vector<int>>ans = floodFill(image, sr, sc, color);
    
    
    for(int i=0; i<ans.size(); i++){
        for(int j=0; j<ans[0].size(); j++){
            cout<<ans[i][j]<<" ";
        }
        cout<<endl;
    }

    return 0;
}
