
#include <iostream>
#include<vector>
#include<queue>
using namespace std;

bool detectCycel(int src, int vis[], vector<int>adj[]){
    //Step1: make cuurent source node visited
    vis[src] = 1;
    
    //Step2: store the pair<source node, parent node> in the queue
    queue<pair<int, int>>q;
    
    //as it is a root node so parent would be -1
    q.push({src, -1});
    
    while(!q.empty()){
        auto it = q.front();
        q.pop();
        
        int node = it.first;
        int parent = it.second;
        
        //Step3: go to all adjacent node of current node
        for(auto adjacentNode : adj[node]){
            //if adjacent node is not visited then go to that node
            if(!vis[adjacentNode]){
                vis[adjacentNode] = 1;
                q.push({adjacentNode, node});
            }
            //if adjacent node is already visited and it's parent node is not same it means there is cycel
            else if(parent != adjacentNode)
                return true;
            
        }
    }
    return false;
}
bool isCycle(int V, vector<int>adj[]){
    int vis[V] = {0};
    //graph can have multiple componenet so if any component has cycle we return true
    for(int i=0; i<V; i++){
        if(!vis[i]){
            if(detectCycel(i, vis, adj))
                return true;
        }
    }
    return false;
}
int main()
{
    vector<int>adj[4] = {{}, {2}, {1, 3}, {2}};
    
    cout<<isCycle(4, adj);
    

    return 0;
}
