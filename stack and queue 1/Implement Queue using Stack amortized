/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<stack>
using namespace std;

//tc: push takes O(n), pop, top, size take O(1), sc:O(2n) 
/*class Queue{
    public:
        stack<int>s1, s2;
        
    void push(int val){
        //step1: put all the elements of s1 to s2
        while(!s1.empty()){
            s2.push(s1.top());
            s1.pop();
        }
        
        //step2: put the val into s2
        s2.push(val);
        
        //step3: put all the elements of s2 into s1
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
    }
    
    void pop(){
        if(s1.empty())
            return;
        s1.pop();
    }
    
    int top(){
        if(s1.empty())
            return -1;
        return s1.top();
    }
    
    int size(){
        return s1.size();
    }
};*/

//using amortized method
//tc:push : (1), pop, top takes O(n) sometimes anly else they take O(1) it is called amortized
class Queue{
  public:
    stack<int>input, output;
    
    void push(int val){
        //push in input stack
        input.push(val);
    }
    
    void pop(){
        //if output is not empty
        if(!output.empty())
            output.pop();
        else{
            while(!input.empty()){
                output.push(input.top());
                input.pop();
            }
        }
        output.pop();
    }
    
    int top(){
        if(!output.empty())
            return output.top();
        else{
            while(!input.empty()){
                output.push(input.top());
                input.pop();
            }
        }
        return output.top();
    }
};

int main()
{
    Queue q;
    
    q.push(3);
  q.push(4);
  q.pop();
  q.push(5);
  cout << "The top of the queue is " << q.top() << endl;
  //cout << "The size of the queue is " << q.size() << endl;
    
    //cout<<q.size();

    return 0;
}
