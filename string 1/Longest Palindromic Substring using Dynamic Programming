
#include <iostream>
#include<cstring>
using namespace std;

//brute force:tc:O(n^3), O(1)
/*bool isPalindrome(string currStr){
    int n = currStr.size();
    
    for(int i=0; i<n/2; i++){
        if(currStr[i] != currStr[n-i-1])
            return false;
    }
    return true;
}
string longestPlaindromic(string str){
    int n = str.size();
    int maxLen = 1;
    int start, end;
    
    //geberate all the substring
    for(int i=0; i<str.length(); i++){
        for(int j=i; j<str.length(); j++){
            string currStr = str.substr(i, j-i+1);
            
            if(isPalindrome(currStr)){
                if((j-i+1) > maxLen){
                    maxLen = j-i+1;
                    start = i;
                }
            }
        }
    }
    return str.substr(start, maxLen);
}*/

//optimal: using dp tc:O(n^2), sc:O(nxn)
string longestPlaindromic(string str){
int n = str.size();
 
    // table[i][j] will be false if substring
    // str[i..j] is not palindrome.
    // Else table[i][j] will be true
    bool table[n][n];
 
    memset(table, 0, sizeof(table));
 
    // All substrings of length 1
    // are palindromes
    int maxLength = 1;
 
    for (int i = 0; i < n; ++i)
        table[i][i] = true;
 
    // check for sub-string of length 2.
    int start = 0;
    for (int i = 0; i < n - 1; ++i) {
        if (str[i] == str[i + 1]) {
            table[i][i + 1] = true;
            start = i;
            maxLength = 2;
        }
    }
 
    // Check for lengths greater than 2.
    // k is length of substring
    for (int k = 3; k <= n; ++k) {
        // Fix the starting index
        for (int i = 0; i < n - k + 1; ++i) {
            // Get the ending index of substring from
            // starting index i and length k
            int j = i + k - 1;
 
            // checking for sub-string from ith index to
            // jth index if str[i+1] to str[j-1] is a
            // palindrome
            if (table[i + 1][j - 1] && str[i] == str[j]) {
                table[i][j] = true;
 
                if (k > maxLength) {
                    start = i;
                    maxLength = k;
                }
            }
        }
    }

    return str.substr(start, maxLength);
}

int main()
{
    string str = "babd";
    
    cout<<longestPlaindromic(str);

    return 0;
}
