#include<iostream>
#include<unordered_set>
using namespace std;

class node {
    public:
        int num;
        node* next;
        node(int val) {
            num = val;
            next = NULL;
        }
};
//utility function to insert node at the end of the linked list
void insertNode(node* &head,int val) {
    node* newNode = new node(val);
    
    if(head == NULL) {
        head = newNode;
        return;
    }
    
    node* temp = head;
    while(temp->next != NULL) temp = temp->next;
    
    temp->next = newNode;
    return;
}
//utility function to print linked list created
void printList(node* head) {
    while(head->next != NULL) {
        cout<<head->num<<"->";
        head = head->next;
    }
    cout<<head->num<<endl;
}

//brute force: tc:O(n^2), sc:O(1)
/*node* intersectionPresent(node* head1,node* head2) {
    while(head2 != NULL) {
        node* temp = head1;
        while(temp != NULL) {
            //if both nodes are same
            if(temp == head2) return head2;
            temp = temp->next;
        }
        head2 = head2->next;
    }
    //intersection is not present between the lists return null
    return NULL;
}*/

//efficient: using hashset, tc:O(n+m), sc:O(1)
/*node* intersectionPresent(node* head1, node* head2){
    unordered_set<node*>st;
    while(head1 != NULL){
        st.insert(head1);
        head1 = head1->next;
    }
    
    //travarse the list and find if the node is present in the std
    while(head2 != NULL){
        if(st.find(head2) != st.end()){
            return head2;
        }
        head2 = head2->next;
    }
    return NULL;
}*/

//optimal: using distance method, tc:O()

int getDiff(node* head1, node* head2){
    int len1=0, len2=0;
    while(head1 != NULL){
        head1 = head1->next;
        len1++;
    }
    
    while(head2 != NULL){
        head2 = head2->next;
        len2++;
    }
    //if difference is negative means list2 is greater than list1
    return len1 - len2; 
}
node* intersectionPresent(node* head1, node* head2){
    int diff = getDiff(head1, head2);
    
    if(diff < 0){
        while(diff != 0){
            head2 = head2->next;
            diff++;
        }
    }
    else{
        while(diff != 0){
            head1 = head1->next;
            diff--;
        }
    }
    
    while(head1 != NULL){
        if(head1 == head2) return head1;
        head1 = head1->next;
        head2 = head2->next;
    }
    return head1;
}


int main() {
    // creation of both lists 
    node* head = NULL;
    insertNode(head,1);
    insertNode(head,3);
    insertNode(head,1);
    insertNode(head,2);
    insertNode(head,4);
    node* head1 = head;
    head = head->next->next->next;
    node* headSec = NULL;
    insertNode(headSec,3);
    node* head2 = headSec;
    headSec->next = head;
    //printing of the lists
    cout<<"List1: "; printList(head1);
    cout<<"List2: "; printList(head2);
    //checking if intersection is present
    node* answerNode = intersectionPresent(head1,head2);
    if(answerNode == NULL )
    cout<<"No intersection\n";
    else
    cout<<"The intersection point is "<<answerNode->num<<endl;
    return 0;
}
