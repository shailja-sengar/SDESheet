#include <iostream>
#include<bits/stdc++.h>
using namespace std;
class node{
    public:
        int data;
        node* next;
        node(int val){
            data = val;
            next = NULL;
        }
};
void insertNode(node* &head, int val){
    node* currNode = new node(val);
    
    if(head == NULL){
        head = currNode;
        return;
    }
    
    node* temp = head;
    while(temp->next != NULL){
        temp = temp->next;
    }
    
    temp->next = currNode;
    return;
}

void createCycle(node* &head, int a, int b){
    node* p1 = head;
    node* p2 = head;
    int cnt_a=0, cnt_b=0;
    
    while(cnt_a != a || cnt_b != b){
        if(cnt_a != a){
            p1 = p1->next;
            ++cnt_a;
        }
        if(cnt_b != b){
            p2 = p2->next;
            ++cnt_b;
        }
    }
    p2->next = p1;
}

// void printList(node* head){
//     while(head != NULL){
//         cout<<head->data<<"->";
//         head = head->next;
//     }
//     cout<<endl;
// }

//using hashing: tc:(n*m), sc:O(n)
// bool isCycle(node* head){
//     unordered_set<node*>st;
    
//     node* temp = head;
//     while(temp != NULL){
//         if(st.find(temp) != st.end())
//             return true;
//         st.insert(temp);
//         temp= temp->next;
//     }
//     return false;
// }

//efficient: cycle detection, tc:O(2*max(len of list1, len of list2)) 
                                    // + O(abs(len of list1, lenof list 2)) 
                                    // + O(min(len of list1, len of list2))
                            //sc : o(1)
bool isCycle(node* head){
    if(head == NULL) return false;
    node* slow = head;
    node* fast = head;
    
    while(fast->next != NULL && fast->next->next != NULL){
        fast = fast->next->next;
        slow = slow->next;
        if(fast == slow) return true;
    }
    return false;
}
int main()
{
    node* head = NULL;
    insertNode(head, 1);
    insertNode(head, 2);
    insertNode(head, 3);
    insertNode(head, 4);
    
    createCycle(head, 1, 3);
    //printList(head);
    //bool ans = isCycle(head);
    if(isCycle(head)== true){
        cout<<"true"<<endl;
    }
    else{
        cout<<"false"<<endl;
    }

    return 0;
}
